#!/bin/bash
# ccbr_bam2rsemcounts 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

run_rsemcounts() {
	mkdir -p /data
	mkdir -p /data/tmp
	cd /data
	bam=$(dx describe "$Bam" --name)
	dx download "$Bam" -o $bam
	dx download "$RSEMindex" -o rsemindex.tar.gz
	cpus=`nproc`
	tar xzvf rsemindex.tar.gz
	
	prefix="${Prefix}.RSEM"
	outRSEMgenes="${Prefix}.RSEM.genes.results"
	outRSEMisoforms="${Prefix}.RSEM.isoforms.results"
	
(>&2 echo "DEBUG:Listing all files in data")
(>&2 tree /data)
(>&2 echo "Done listing")

	dx-docker run -v /data/:/data kopardev/ccbr_rsem_1.3.1 rsem-calculate-expression \
	--no-bam-output \
	--calc-ci \
	--seed 12345 \
	--bam \
	--paired-end \
	-p $cpus \
	$bam \
	$Genome \
	$prefix \
	--time \
	--temporary-folder /data/tmp \
	--keep-intermediate-files
	
(>&2 echo "DEBUG:Listing all files in data")
(>&2 tree /data)
(>&2 echo "Done listing")

	OutRSEMgenes=$(dx upload $outRSEMgenes --brief)
	dx-jobutil-add-output OutRSEMgenes "$OutRSEMgenes" --class=file
	
	OutRSEMisoforms=$(dx upload $outRSEMisoforms --brief)
	dx-jobutil-add-output OutRSEMisoforms "$OutRSEMisoforms" --class=file
}

main() {

    echo "Value of TranscriptomeBam: '${TranscriptomeBam[@]}'"
    echo "Value of Genome: '$Genome'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
    
	mkdir -p /data
	mkdir -p $HOME/out/OutRSEMisoforms
	mkdir -p $HOME/out/OutRSEMgenes
	
	rsemindex=$(python /get_fileid.py $Genome 'rsemindex')
	subjobids=""
	for (( i=0; i<${#TranscriptomeBam[@]} ; i+=1 )) ; do
		bam=$(dx describe "${TranscriptomeBam[$i]}" --name)
		prefix=`echo $bam|awk -F ".p2." '{print $1}'`
		outRSEMgenes="${prefix}.RSEM.genes.results"
		outRSEMisoforms="${prefix}.RSEM.isoforms.results"
		process_job=$(dx-jobutil-new-job run_rsemcounts -iBam=$bam -iRSEMindex=$rsemindex -iGenome=$Genome -iPrefix=$prefix --instance-type="mem1_ssd1_x32")
		echo "Value of process_job: '$process_job'"
		subjobids="$subjobids $process_job"
		echo -ne "$process_job\t$outRSEMgenes\t$outRSEMisoforms\n" >> /data/lookuptable.txt
	done
	
	while read jobid rsemgenes rsemisoforms;do
	
	dx wait $jobid
	
	cd $HOME/out/OutRSEMgenes
	dx download $jobid:OutRSEMgenes -o $rsemgenes
	
	cd $HOME/out/OutRSEMisoforms
	dx download $jobid:OutRSEMisoforms -o $rsemisoforms
		
	done < /data/lookuptable.txt
	
(>&2 echo "DEBUG:Listing all files in out")
(>&2 tree $HOME/out)
(>&2 echo "Done listing")

dx-upload-all-outputs --parallel 

#     for i in ${!TranscriptomeBam[@]}
#     do
#         dx download "${TranscriptomeBam[$i]}" -o TranscriptomeBam-$i
#     done

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

#     for i in "${!OutRSEMgenes[@]}"; do
#         dx-jobutil-add-output OutRSEMgenes "${OutRSEMgenes[$i]}" --class=array:file
#     done
#     for i in "${!OutRSEMisoforms[@]}"; do
#         dx-jobutil-add-output OutRSEMisoforms "${OutRSEMisoforms[$i]}" --class=array:file
#     done
}
