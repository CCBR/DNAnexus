#!/bin/bash

set -e -x -o pipefail

# ccbr_cutadapt_array_pe 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.


run_trim_pe() {
        # myfunc only gets called when invoked by main (or by another
        # entry point)
	mkdir -p /data
	cd /data
	r1=$(dx describe "$R1" --name)
	r2=$(dx describe "$R2" --name)
	dx download "$R1" -o $r1
	dx download "$R2" -o $r2
	cpus=`nproc`
	or1=`echo $r1|sed "s/.fastq.gz/.trimmed.fastq.gz/g"`
	or2=`echo $r2|sed "s/.fastq.gz/.trimmed.fastq.gz/g"`
	dx-docker run -v /data/:/data kopardev/ccbr_cutadapt_1.18 cutadapt --pair-filter=any --nextseq-trim=2 --trim-n -n 5 -O 5 -q 10,10 -m 35:35 -b file:/opt/TruSeq_and_nextera_adapters.consolidated.fa -B file:/opt/TruSeq_and_nextera_adapters.consolidated.fa -j $cpus -o $or1 -p $or2 $r1 $r2
	OutR1=$(dx upload $or1 --brief)
	OutR2=$(dx upload $or2 --brief)
	dx-jobutil-add-output OutR1 "$OutR1" --class=file
	dx-jobutil-add-output OutR2 "$OutR2" --class=file
}

main() {

    echo "Value of InFq: '${InFq[@]}'"
#     echo "${InFq_prefix[@]}"
# echo "${InFq_prefix[0]}"
# echo "${InFq_prefix[1]}"
# InFq_basename=()
#     for i in ${!InFq[@]}
#     do
#     	a=$(dx describe "${InFq[$i]}" --name)
#     	a=$(echo $a|awk -F "/" '{print $NF}'|awk -F ".fastq" '{print $1}')
#     	InFq_basename+=("$a")
# 			echo "${InFq_basename[@]}"
#     done
# echo "${InFq_basename[@]}"
# echo "${InFq_basename[0]}"
# echo "${InFq_basename[2]}"
# exit
    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

#     for i in ${!InFq[@]}
#     do
#         dx download "${InFq[$i]}" -o InFq-$i
#     done

	mkdir -p /data
	cd /data
	mkdir -p $HOME/out/OutFq
	
	# for i in ${!InFq[@]}
	subjobids=""
	for (( i=0; i<${#InFq[@]} ; i+=2 )) ; do
		process_job=$(dx-jobutil-new-job run_trim_pe -iR1="${InFq[$i]}" -iR2="${InFq[$i+1]}" --instance-type="mem1_ssd1_x16")
		echo "Value of process_job: '$process_job'"
		subjobids="$subjobids $process_job"
	done

count=0
cd $HOME/out/OutFq
for i in $subjobids
do
	echo "Waiting for '$i'"
	dx wait $i
	echo "Downloading trimmed fastq"
# 	using bash app helper variables
# (>&2 echo "count: '$count'")
# (>&2 echo "InFq_prefix : ${InFq_prefix[$count]}")
	outname_base1="${InFq_prefix[$count]}"
	count=$((count+1))
	outname_base2="${InFq_prefix[$count]}"
# (>&2 echo "count: '$count'")
# (>&2 echo "InFq_prefix : ${InFq_prefix[$count]}")
# (>&2 echo "DEBUG:Listing all files in out")
(>&2 tree $HOME/out)
(>&2 echo "Done listing")
	dx download $i:OutR1 
	dx download $i:OutR2 
	count=$((count+1))
(>&2 echo "DEBUG:Listing all files in out")
(>&2 tree $HOME/out)
(>&2 echo "Done listing")
done

(>&2 echo "DEBUG:Listing all files in out")
(>&2 tree $HOME/out)
(>&2 echo "Done listing")

dx-upload-all-outputs --parallel 

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

#     for i in "${!OutFq[@]}"; do
#         dx-jobutil-add-output OutFq "${OutFq[$i]}" --class=array:file
#     done
}
