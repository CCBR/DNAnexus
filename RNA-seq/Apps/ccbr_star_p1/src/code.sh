#!/bin/bash

set -e -x -o pipefail

# ccbr_star_p1 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

run_starp1() {
	mkdir -p /data
	cd /data
	r1=$(dx describe "$R1" --name)
	prefix="${r1%%.*}."
	r2=$(dx describe "$R2" --name)
	dx download "$R1" -o $r1
	dx download "$R2" -o $r2
	cpus=`nproc`
	dx download "$Tarfile" -o starindex.tar.gz
	tar xzvf starindex.tar.gz

(>&2 echo "DEBUG:Listing all files in data")
(>&2 tree /data)
(>&2 echo "Done listing")

	genomeDir=`find /data/ -maxdepth 1 -name "*genes-*"`
	tabfile="${prefix}SJ.out.tab"
	dx-docker run -v /data/:/data kopardev/ccbr_star_2.6.0a STAR \
	--genomeDir ${genomeDir} \
	--outFilterIntronMotifs RemoveNoncanonicalUnannotated \
	--outSAMstrandField None \
	--outFilterType BySJout \
	--outFilterMultimapNmax 20 \
	--alignSJoverhangMin 8 \
	--alignSJDBoverhangMin 1 \
	--outFilterMismatchNmax 999 \
	--outFilterMismatchNoverLmax 0.3 \
	--alignIntronMin 20 \
	--alignIntronMax 1000000 \
	--alignMatesGapMax 1000000 \
	--readFilesIn $r1 $r2 \
	--readFilesCommand zcat \
	--runThreadN $cpus \
	--outFileNamePrefix ${prefix} 
	
(>&2 echo "DEBUG:Listing all files in data")
(>&2 tree /data)
(>&2 echo "Done listing")
	
	OutTab=$(dx upload $tabfile --brief)
	dx-jobutil-add-output OutTab "$OutTab" --class=file

}

main() {

    echo "Value of RawFq: '${RawFq[@]}'"
    echo "Value of TrimmedFq: '${TrimmedFq[@]}'"
    echo "Value of TrimmedFastqcTxt: '${TrimmedFastqcTxt[@]}'"
    echo "Value of Genome: '$Genome'"
    

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
	mkdir -p /data
	mkdir -p /data/txt
	cd /data/txt
	for i in ${!TrimmedFastqcTxt[@]}
	do
			txt=$(dx describe "${TrimmedFastqcTxt[$i]}" --name)
			dx download "${TrimmedFastqcTxt[$i]}" -o $txt
	done
	cd /data
	
(>&2 echo "DEBUG:Listing all files in data")
(>&2 tree /data)
(>&2 echo "Done listing")

	tarfile=$(python /get_starindexid.py /data/txt $Genome)
	tarfile="project-FPkJp0Q0xx3Y9XXKKzB0408Y:${tarfile}"
	for i in ${!TrimmedFq[@]}
	do
		fq=$(dx describe "${TrimmedFq[$i]}" --name)
		dx download "${TrimmedFq[$i]}" -o $fq
	done
	subjobids=""
	for (( i=0; i<${#RawFq[@]} ; i+=2 )) ; do
		r1=$(dx describe "${RawFq[$i]}" --name)
		r2=$(dx describe "${RawFq[$i+1]}" --name)
		r1=`echo $r1|sed "s/.fastq/.trimmed.fastq/g"`
		r2=`echo $r2|sed "s/.fastq/.trimmed.fastq/g"`
		process_job=$(dx-jobutil-new-job run_starp1 -iR1=$r1 -iR2=$r2 -iTarfile=$tarfile --instance-type="mem1_ssd1_x32")
		echo "Value of process_job: '$process_job'"
		subjobids="$subjobids $process_job"
	done

for i in $subjobids	
do
	echo "Waiting for ",$i
	dx wait $i
	dx download $i:OutTab
done

(>&2 echo "DEBUG:Listing all files in data")
(>&2 tree /data)
(>&2 echo "Done listing")

cat *SJ.out.tab |sort|uniq|awk -F "\t" '{if ($5>0 && $6==1) {print}}'|cut -f1-4|sort|uniq|grep "^chr"|grep -v "^chrM" > uniq.SJ.out.tab
(>&2 echo "DEBUG:Listing all files in data")
(>&2 tree /data)
(>&2 echo "Number of uniq SJ out tabs :")
(>&2 wc -l uniq.SJ.out.tab)

    UniqSJOutTab=$(dx upload uniq.SJ.out.tab --brief)
    dx-jobutil-add-output UniqSJOutTab "$UniqSJOutTab" --class=file

(>&2 echo "Done uploading!")


#     for i in ${!RawFq[@]}
#     do
#         dx download "${RawFq[$i]}" -o RawFq-$i
#     done





    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

#     for i in "${!SJOut[@]}"; do
#         dx-jobutil-add-output SJOut "${SJOut[$i]}" --class=array:file
#     done
}
