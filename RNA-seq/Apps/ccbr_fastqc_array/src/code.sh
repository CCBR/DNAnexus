#!/bin/bash

set -e -x -o pipefail
# The -e flag causes bash to exit at any point if there is any error, 
# the -o pipefail flag tells bash to throw an error if it encounters an error within a pipeline, 
# while the -x flag causes bash to output each line as it is executed -- useful for debugging

# ccbr_fastqc_array 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

run_fastqc() {
        # myfunc only gets called when invoked by main (or by another
        # entry point)
	mkdir -p /data
	cd /data
	echo $input_fastq
	infq=$(dx describe "$input_fastq" --name)
	dx download "$input_fastq" -o $infq
	cpus=`nproc`
	dx-docker run -v /data/:/data kopardev/fastqc_0.11.8 fastqc --extract --threads $cpus $infq
	outhtml=`echo $infq|sed "s/.gz//g"|sed "s/.fastq/_fastqc_report.html/g"`
	outtxt=`echo $infq|sed "s/.gz//g"|sed "s/.fastq/_fastqc_data.txt/g"`
	cd *_fastqc
	outdir=`pwd`
	mv fastqc_report.html $outhtml
	mv fastqc_data.txt $outtxt
	OutHtml=$(dx upload ${outdir}/${outhtml} --brief)
	OutTxt=$(dx upload ${outdir}/${outtxt} --brief)
	dx-jobutil-add-output OutHtml "$OutHtml" --class=file
	dx-jobutil-add-output OutTxt "$OutTxt" --class=file
}


main() {

    echo "Value of file: '${InFq[@]}'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

#     for i in ${!InFq[@]}
#     do
#         dx download "${InFq[$i]}" -o file-$i
#     done

mkdir -p /data
cd /data
mkdir -p $HOME/out
mkdir -p $HOME/out/OutHtml
mkdir -p $HOME/out/OutTxt


(>&2 echo "DEBUG:Listing all files in root")
(>&2 ls -larth)
(>&2 echo "Done listing")
		
subjobids=""
for i in ${!InFq[@]}
do
	process_job=$(dx-jobutil-new-job run_fastqc -iinput_fastq="${InFq[$i]}" --instance-type="mem1_ssd1_x16")
	echo "Value of process_job: '$process_job'"
	subjobids="$subjobids $process_job"
done
count=0
for i in $subjobids
do
# 	mkdir -p $HOME/out/OutHtml/${count}
# 	mkdir -p $HOME/out/OutTxt/${count}
	infq=$(dx describe "${InFq[$count]}" --name)
	echo "Waiting for ",$i
	dx wait $i
	echo "Downloading html"
# 	using bash app helper variables
	outname_base="${InFq_prefix[$count]}"
# 	dx download $i:OutHtml -o $HOME/out/OutHtml/${count}/${outname_base}.html
	dx download $i:OutHtml -o $HOME/out/OutHtml/${outname_base}_fastqc_report.html
# 	OutHtml=$(dx upload $HOME/out/OutHtml/${outname_base}.html --brief)
# 	dx-jobutil-add-output OutHtml "${OutHtml[$count]}" --class=array:file
	echo "Downloading txt"
# 	dx download $i:OutTxt -o $HOME/out/OutTxt/${count}/${outname_base}.txt
	dx download $i:OutTxt -o $HOME/out/OutTxt/${outname_base}_fastqc_data.txt
# 	OutTxt=$(dx upload $HOME/out/OutTxt/${outname_base}.txt --brief)
# 	dx-jobutil-add-output OutTxt "${OutTxt[$count]}" --class=array:file
	count=$((count+1))
done

(>&2 echo "DEBUG:Listing all files in out")
(>&2 tree $HOME/out)
(>&2 echo "Done listing")

# mv $OutHtml /out/OutHtml/
# mv $OutTxt /out/OutTxt/
dx-upload-all-outputs --parallel 


    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

# 	for i in "${!OutHtml[@]}"; do
# 		outname_base="${InFq_prefix[$i]}"
# 		OutHtml=$(dx upload $HOME/out/OutHtml/${outname_base}.html --brief)
# 		dx-jobutil-add-output OutHtml "${OutHtml[$i]}" --class=array:file
# 	done
# 	for i in "${!OutTxt[@]}"; do
# 		outname_base="${InFq_prefix[$i]}"
# 		OutTxt=$(dx upload $HOME/out/OutTxt/${outname_base}.txt --brief)
# 		dx-jobutil-add-output OutTxt "${OutTxt[$i]}" --class=array:file
# 	done

}
