#!/bin/bash
# ccbr_rseqc 0.01
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.


run_rseqc() {

    echo "Value of InBam: '$bam'"
    echo "Value of InBai: '$bai'"
    echo "Value of RefGenome: '$ref'"

    # Download Input(s) and get filename(s)
    (>&2 echo "Downloading")
    mkdir -p /data/ && cd /data/

    bamfile=/data/$(dx describe "$bam" --name)
    baifile=/data/$(dx describe "$bai" --name)
    refgenome=$ref

    # For geneBody_coverage.py to work, there must be a corresponding *.bam.bai file
    if [[ $baifile != *.bam.bai ]]; then baifile=`echo $baifile | sed "s/.bai/.bam.bai/g"`; fi
    (>&2 echo "Bam Filename:  $bamfile" &&  echo "Bai Filename:  $baifile")

    dx download "$bam" -o $bamfile
    dx download "$bai" -o $baifile

    # Checking Download(s)
    (>&2 echo "Listing all files in / after download")
    (>&2 ls -larth /)
    (>&2 echo "Listing all files in /data/ after download")
    (>&2 tree /data/)
    (>&2 echo "Done listing")

    # Moving Resource File(s) into /data sub-directories
    tar -xzf /rseqc_gene_models.tar.gz -C /data/
    tar -xzf /houseKeepingGenes.tar.gz -C /data/

    # Checking Resource Unpacking
    (>&2 echo "Listing all files after Extraction")
    (>&2 tree /data/)

    # Resolving the path to the correct reference genome gene model
    (>&2 echo "Reference Genome: $refgenome")
    genemodel="/data/geneModels/`echo $refgenome`_genes_ref.bed"
    (>&2 echo "Reference Genome Gene Model: $genemodel")
    hkgenes="/data/hkGenes/`echo $refgenome`_hkgenes_ref.bed"
    (>&2 echo "Reference House Keeping Genes: $hkgenes")


    # Getting Output File Basename
    outfn=`echo $bamfile | sed "s/.star_rg_added.sorted.dmark.bam//g"`

    # Base-case if bam file does not have that extension
    if [ "$bamfile" == "$outfn" ]; then outfn=`echo $bamfile | sed "s/.bam//g"`; fi
    (>&2 echo "Output File Basename:  $outfn")

    # Note: This entire bash script is executed with '-e'.
    # Add dx-docker run command here: Vishal's container does not have Rscript: Using this container for now: cdiasgurjao/rseqc:latest
    # Running RSeQC

    dx-docker pull kopardev/ccbr_rseqc_3.0.0:latest

    (>&2 echo "Looking at Directory after pulling docker" )
    echo "#!/bin/bash" > rseqc2parallel
    echo "dx-docker run -v /data/:/data/ kopardev/ccbr_rseqc_3.0.0:latest geneBody_coverage.py -i $bamfile -r $hkgenes -o $outfn" >> rseqc2parallel
    echo "dx-docker run -v /data/:/data/ kopardev/ccbr_rseqc_3.0.0:latest read_GC.py -i $bamfile -o $outfn" >> rseqc2parallel
    echo "dx-docker run -v /data/:/data/ kopardev/ccbr_rseqc_3.0.0:latest inner_distance.py -i $bamfile -r $genemodel -o $outfn" >> rseqc2parallel
    echo "dx-docker run -v /data/:/data/ kopardev/ccbr_rseqc_3.0.0:latest junction_annotation.py -i $bamfile -r $genemodel -o $outfn" >> rseqc2parallel
    echo "dx-docker run -v /data/:/data/ kopardev/ccbr_rseqc_3.0.0:latest junction_saturation.py -i $bamfile -r $genemodel -o $outfn" >> rseqc2parallel
    echo "dx-docker run -v /data/:/data/ kopardev/ccbr_rseqc_3.0.0:latest infer_experiment.py -i $bamfile -r $genemodel  > $outfn.infer_experiment.txt" >> rseqc2parallel
    echo "dx-docker run -v /data/:/data/ kopardev/ccbr_rseqc_3.0.0:latest read_distribution.py -i $bamfile -r $genemodel > $outfn.read_distribution.txt" >> rseqc2parallel

    # Checking the contects on the of the subcommands file
    (>&2 echo "Checking RSeQC commands to run in parallel")
    cat rseqc2parallel

    # Run the RSeQC commands in parallel
    (>&2 echo "Running RSeQC commands in parallel")
    parallel < rseqc2parallel

    # Checking Output:
    (>&2 echo "Listing all files after running RSeQC")
    (>&2 echo "$PWD" && ls -larth)
    (>&2 echo "Done listing")

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    insertSizeFreq_TXT=$(dx upload $outfn.inner_distance_freq.txt --brief)
    insertSize_R=$(dx upload $outfn.inner_distance_plot.r --brief)
    insertSize_PDF=$(dx upload $outfn.inner_distance_plot.pdf --brief)
    houseKeeping_PDF=$(dx upload $outfn.geneBodyCoverage.curves.pdf --brief)
    houseKeeping_R=$(dx upload $outfn.geneBodyCoverage.r --brief)
    houseKeeping_TXT=$(dx upload $outfn.geneBodyCoverage.txt --brief)
    JunctSat_PDF=$(dx upload $outfn.junctionSaturation_plot.pdf --brief)
    JunctSat_R=$(dx upload $outfn.junctionSaturation_plot.r --brief)
    JunctAnn_R=$(dx upload $outfn.junction_plot.r --brief)
    JunctAnn_xls=$(dx upload $outfn.junction.xls --brief)
    JunctAnn_bed=$(dx upload $outfn.junction.bed --brief)
    ReadGC_pdf=$(dx upload $outfn.GC_plot.pdf --brief)
    ReadGC_R=$(dx upload $outfn.GC_plot.r --brief)
    ReadGC_xls=$(dx upload $outfn.GC.xls --brief)
    inferExp=$(dx upload $outfn.infer_experiment.txt --brief)
    ReadDist=$(dx upload $outfn.read_distribution.txt --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output innerDistFreq_TXT "$insertSizeFreq_TXT" --class=file
    dx-jobutil-add-output innerDist_R "$insertSize_R" --class=file
    dx-jobutil-add-output innerDist_PDF "$insertSize_PDF" --class=file
    dx-jobutil-add-output hkGene_PDF "$houseKeeping_PDF" --class=file
    dx-jobutil-add-output hkGene_R "$houseKeeping_R" --class=file
    dx-jobutil-add-output hkGene_TXT "$houseKeeping_TXT" --class=file
    dx-jobutil-add-output JunctSat_PDF "$JunctSat_PDF" --class=file
    dx-jobutil-add-output JunctSat_R "$JunctSat_R" --class=file
    dx-jobutil-add-output JunctAnn_R "$JunctAnn_R" --class=file
    dx-jobutil-add-output JunctAnn_xls "$JunctAnn_xls" --class=file
    dx-jobutil-add-output JunctAnn_bed "$JunctAnn_bed" --class=file
    dx-jobutil-add-output ReadGC_pdf "$ReadGC_pdf" --class=file
    dx-jobutil-add-output ReadGC_R "$ReadGC_R" --class=file
    dx-jobutil-add-output ReadGC_xls "$ReadGC_xls" --class=file
    dx-jobutil-add-output inferExp "$inferExp" --class=file
    dx-jobutil-add-output ReadDist "$ReadDist" --class=file
}




main() {

    echo "Value of InBam Array: '${InBam[@]}'"
    echo "Value of InBai Array: '${InBai[@]}'"
    echo "Value of RefGenome String: '$RefGenome'"

    # Download Input(s) and get filename(s)
    (>&2 echo "Downloading")
    mkdir -p /data/ && cd /data/

    # Creating output directories to use 'dx-upload-all-outputs --parallel'
    mkdir -p $HOME/out/innerDistFreq_TXT && mkdir -p $HOME/out/innerDist_R && mkdir -p $HOME/out/innerDist_PDF
    mkdir -p $HOME/out/hkGene_PDF && mkdir -p $HOME/out/hkGene_R && mkdir -p $HOME/out/hkGene_TXT
    mkdir -p $HOME/out/JunctSat_PDF && mkdir -p $HOME/out/JunctSat_R
    mkdir -p $HOME/out/JunctAnn_R && mkdir -p $HOME/out/JunctAnn_xls && mkdir -p $HOME/out/JunctAnn_bed
    mkdir -p $HOME/out/ReadGC_pdf && mkdir -p $HOME/out/ReadGC_R && mkdir -p $HOME/out/ReadGC_xls
    mkdir -p $HOME/out/inferExp
    mkdir -p $HOME/out/ReadDist
    (>&2 tree $HOME)

    # Creating an associative array to map *.bai filenames to their object-ids
    # to ensure the correct files are paired together (requires >= bash v.4)
    declare -A f2id
    for (( i=0; i<${#InBai[@]}; i+=1 )); do
        echo "File's Object ID: ${InBai[$i]}"
        fname=$(dx describe "${InBai[$i]}" --name)
        fname2="${InBai_filename[$i]}"
        echo "Filename: $fname"
        echo "Filename2: $fname2"
        f2id["$fname"]="${InBai[$i]}"
    done

    # Looping through the associative array to print out the data strucutre's key and values
    (>&2 echo "Key : Value")
    for filename in "${!f2id[@]}"; do
        echo "$filename : ${f2id[$filename]}"
    done

    # Submitting subjobs to run_rseqc and getting their jobids
   (>&2 echo "Submitting subjobs to run_rseqc")
    subjobids=""
    for (( i=0; i<${#InBam[@]}; i+=1 )); do
        bam=$(dx describe "${InBam[$i]}" --name)
        bai=$(echo $bam | sed "s/.bam/.bai/g")
        echo "Bam: $bam"
        echo "Bai: $bai"
        process_job=$(dx-jobutil-new-job run_rseqc -ibam="${InBam[$i]}" -ibai="${f2id[$bai]}" -iref="$RefGenome" --instance-type="mem2_ssd1_x8") || (>&2 echo "You are missing a *.bam/*.bai file pair!")
        subjobids+="$process_job "
    done

    echo "Subjobids: $subjobids"
    # Downloading the results
    for i in $subjobids ; do

        echo "Waiting for '$i'"
        dx wait $i

        echo "Downloading Inner Distance Frequency Results"
        dx download $i:innerDistFreq_TXT -o $HOME/out/innerDistFreq_TXT/
        dx download $i:innerDist_R -o $HOME/out/innerDist_R/
        dx download $i:innerDist_PDF -o $HOME/out/innerDist_PDF/

        echo "Downloading House Keeping Gene Results"
        dx download $i:hkGene_PDF -o $HOME/out/hkGene_PDF/
        dx download $i:hkGene_R -o $HOME/out/hkGene_R/
        dx download $i:hkGene_TXT -o $HOME/out/hkGene_TXT/

        echo "Downloading Junction Saturation Results"
        dx download $i:JunctSat_PDF -o $HOME/out/JunctSat_PDF/
        dx download $i:JunctSat_R -o $HOME/out/JunctSat_R/

        echo "Downloading Junction Annotation Results"
        dx download $i:JunctAnn_R -o $HOME/out/JunctAnn_R/
        dx download $i:JunctAnn_xls -o $HOME/out/JunctAnn_xls/
        dx download $i:JunctAnn_bed -o $HOME/out/JunctAnn_bed/

        echo "Downloading GC content Results"
        dx download $i:ReadGC_pdf -o $HOME/out/ReadGC_pdf/
        dx download $i:ReadGC_R -o $HOME/out/ReadGC_R/
        dx download $i:ReadGC_xls -o $HOME/out/ReadGC_xls/

        echo "Downloading Infer Experiment Results"
        dx download $i:inferExp -o $HOME/out/inferExp/

        echo "Downloading Read Distribution Results"
        dx download $i:ReadDist -o $HOME/out/ReadDist/

        echo "Done downloading results for '$i'"
        (>&2 tree $HOME)

    done

    # Uploading all the output files
    (>&2 echo "Download Complete!")
    dx-upload-all-outputs --parallel
}

