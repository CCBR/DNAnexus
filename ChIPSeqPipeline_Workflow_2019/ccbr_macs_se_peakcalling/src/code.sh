#!/bin/bash
# ccbr_macs_se_peakcalling 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of TreatmentTagAlign: '$TreatmentTagAlign'"
    echo "Value of TreatmentPPQT: '$TreatmentPPQT'"
    echo "Value of InputTagAlign: '$InputTagAlign'"
    echo "Value of BwaIndex: '$BwaIndex'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

mkdir -p /data
cd /data

reftargz=$(dx describe "$BwaIndex" --name)
ref=${reftargz%%.*}
ref=`echo $ref|awk '{print substr($1,1,2)}'`
if [ "$ref" == "hg" ]; then
genome="hs"
elif [ "$ref" == "mm" ]; then
genome="mm"
fi

t_tagalign=$(dx describe "$TreatmentTagAlign" --name)
dx download "$TreatmentTagAlign" -o $t_tagalign
t_ppqt=$(dx describe "$TreatmentPPQT" --name)
dx download "$TreatmentPPQT" -o $t_ppqt
i_tagalign=$(dx describe "$InputTagAlign" --name)
dx download "$InputTagAlign" -o $i_tagalign

outname=${t_tagalign}_vs_${i_tagalign}
narrowPeak=${outname}_peaks.narrowPeak
xls=${outname}_peaks.xls
bed=${outname}_summits.bed

#dx-docker run -v /data/:/data kopardev/ccbr_spp_1.14 run_spp.R -c=$t_tagalign -out=ppqt

extsize=`cat $t_ppqt|awk -F"\t" '{print $3}'|awk -F"," '{print $1}'`
tagsize=`cat $t_ppqt|awk -F"\t" '{print $5}'|awk -F"," '{print $1}'`

dx-docker run -v /data/:/data nciccbr/ccbr_macs2_2.1.1.20160309:v032219 macs2 callpeak -t $t_tagalign -c $i_tagalign -n $outname --nomodel --extsize $extsize --tsize $tagsize -q 0.01 -f BED -g $genome --keep-dup=auto

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    NarrowPeak=$(dx upload /data/$narrowPeak --brief)
    Xls=$(dx upload /data/$xls --brief)
    Bed=$(dx upload /data/$bed --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output NarrowPeak "$NarrowPeak" --class=file
    dx-jobutil-add-output Xls "$Xls" --class=file
    dx-jobutil-add-output Bed "$Bed" --class=file
}
