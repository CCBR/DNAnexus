#!/bin/bash
# ccbr_macs_se_peakcalling 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of TreatmentTagAlign: '$TreatmentTagAlign'"
    echo "Value of TreatmentPPQT: '$TreatmentPPQT'"
    echo "Value of InputTagAlign: '$InputTagAlign'"
    echo "Value of Genome: '$Genome'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

mkdir -p /data
cd /data
cpus=`nproc`

sarfile="/data/${DX_JOB_ID}_sar.txt"
sar 5 > $sarfile &
SAR_PID=$!

genome2resources=$(dx describe "$Genome2Resources" --name)
dx download "$Genome2Resources" -o $genome2resources

genomesize=$(python /get_fileid.py $Genome 'effectiveSize' $genome2resources)

t_tagalign=$(dx describe "$TreatmentTagAlign" --name)
dx download "$TreatmentTagAlign" -o $t_tagalign
t_ppqt=$(dx describe "$TreatmentPPQT" --name)
dx download "$TreatmentPPQT" -o $t_ppqt
i_tagalign=$(dx describe "$InputTagAlign" --name)
dx download "$InputTagAlign" -o $i_tagalign

outname=${t_tagalign}_vs_${i_tagalign}
narrowPeak=${outname}_peaks.narrowPeak
summitsbed=${outname}_summits.bed
broadPeak=${outname}_peaks.broadPeak
gappedPeak=${outname}_peaks.gappedPeak

#call narrow peaks
dx-docker run -v /data/:/data nciccbr/ccbr_macs:v0.0.1 ccbr_macs_callpeak_se.bash --treatment $t_tagalign --input $i_tagalign --outprefix $outname --genomesize $genomesize --treatmentppqt $t_ppqt 

#call broad peaks
dx-docker run -v /data/:/data nciccbr/ccbr_macs:v0.0.1 ccbr_macs_callpeak_se.bash --treatment $t_tagalign --input $i_tagalign --outprefix $outname --genomesize $genomesize --treatmentppqt $t_ppqt --broad


    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    NarrowPeak=$(dx upload /data/$narrowPeak --brief)
    SummitsBed=$(dx upload /data/$summitsbed --brief)
    BroadPeak=$(dx upload /data/$broadPeak --brief)
    GappedPeak=$(dx upload /data/$gappedPeak --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output NarrowPeak "$NarrowPeak" --class=file
    dx-jobutil-add-output SummitsBed "$SummitsBed" --class=file
    dx-jobutil-add-output BroadPeak "$BroadPeak" --class=file
    dx-jobutil-add-output GappedPeak "$GappedPeak" --class=file

    kill -9 $SAR_PID
    SarTxt=$(dx upload $sarfile --brief)
    dx-jobutil-add-output SarTxt "$SarTxt" --class=file
}
