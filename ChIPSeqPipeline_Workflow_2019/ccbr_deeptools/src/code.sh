#!/bin/bash
set -e -x -o pipefail
# ccbr_deeptools
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of TreatmentBam: '$TreatmentBam'"
	echo "Value of InputBam: '$InputBam'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

mkdir -p /data
cd /data
cpus=`nproc`

sarfile="/data/${DX_JOB_ID}_sar.txt"
sar 5 > $sarfile &
SAR_PID=$!

genome2resources=$(dx describe "$Genome2Resources" --name)
dx download "$Genome2Resources" -o $genome2resources
treatmentbam=$(dx describe "$TreatmentBam" --name)
dx download "$TreatmentBam" -o $treatmentbam
inputbam=$(dx describe "$InputBam" --name)
dx download "$InputBam" -o $inputbam
treatmentbigwig=$(dx describe "$TreatmentBigwig" --name)
dx download "$TreatmentBigwig" -o $treatmentbigwig
inputbigwig=$(dx describe "$InputBigwig" --name)
dx download "$InputBigwig" -o $inputbigwig

GenesBed=$(python /get_fileid.py $Genome 'genesBed' $genome2resources)
genesBed=$(dx describe "$GenesBed" --name)
dx download "$GenesBed" -o $genesBed

t_label=${treatmentbam%%.*}
i_label=${inputbam%%.*}
fingerprintplot=${treatmentbam%.*}_vs_${inputbam%.*}.fingerprint.pdf
metageneheatmap=${treatmentbam%.*}_vs_${inputbam%.*}.metageneheatmap.pdf
metageneprofileplot=${treatmentbam%.*}_vs_${inputbam%.*}.metageneprofile.pdf

cpus=`nproc`

treatmentsortedbam=`echo $treatmentbam|sed "s/.bam/.sorted.bam/g"`
inputsortedbam=`echo $inputbam|sed "s/.bam/.sorted.bam/g"`

dx-docker run -v /data/:/data nciccbr/ccbr_samtools_1.7:v032619 samtools sort -@ $cpus -o $treatmentsortedbam $treatmentbam
dx-docker run -v /data/:/data nciccbr/ccbr_samtools_1.7:v032619 samtools sort -@ $cpus -o $inputsortedbam $inputbam

dx-docker run -v /data/:/data nciccbr/ccbr_samtools_1.7:v032619 samtools index $treatmentsortedbam
dx-docker run -v /data/:/data nciccbr/ccbr_samtools_1.7:v032619 samtools index $inputsortedbam

dx-docker run -v /data/:/data nciccbr/ccbr_deeptools_3.2.0:v032619 plotFingerprint -b $treatmentsortedbam $inputsortedbam --labels $t_label $i_label -p $cpus --skipZeros --plotFile $fingerprintplot

dx-docker run -v /data/:/data nciccbr/ccbr_deeptools_3.2.0:v032619 computeMatrix scale-regions -S $treatmentbigwig $inputbigwig -R $genesBed -p $cpus --upstream 3000 --regionBodyLength 2000 --downstream 1000 --skipZeros -o matrix.txt --smartLabels

dx-docker run -v /data/:/data nciccbr/ccbr_deeptools_3.2.0:v032619 plotHeatmap -m matrix.txt -out $metageneheatmap --colorMap 'PuOr_r' --yAxisLabel 'average RPGC' --regionsLabel 'genes' --legendLocation 'none'

dx-docker run -v /data/:/data nciccbr/ccbr_deeptools_3.2.0:v032619 plotProfile -m matrix.txt -out $metageneprofileplot --plotHeight 15 --plotWidth 15 --perGroup --yAxisLabel 'average RPGC' --plotType 'se' --legendLocation upper-right


    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    FingerPrintPlot=$(dx upload /data/$fingerprintplot --brief)
    MetageneHeatMap=$(dx upload /data/$metageneheatmap --brief)
    MetageneProfilePlot=$(dx upload /data/$metageneprofileplot --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output FingerPrintPlot "$FingerPrintPlot" --class=file
    dx-jobutil-add-output MetageneHeatMap "$MetageneHeatMap" --class=file
    dx-jobutil-add-output MetageneProfilePlot "$MetageneProfilePlot" --class=file

    kill -9 $SAR_PID
    SarTxt=$(dx upload $sarfile --brief)
    dx-jobutil-add-output SarTxt "$SarTxt" --class=file
}
