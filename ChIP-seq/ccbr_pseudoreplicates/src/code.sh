#!/bin/bash
# ccbr_cutadapt_1.18 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

echo "Value of TreatmentRep1Tagalign: '$TreatmentRep1Tagalign'"
echo "Value of TreatmentRep2Tagalign: '$TreatmentRep2Tagalign'"
echo "Value of InputRep1Tagalign: '$InputRep1Tagalign'"
echo "Value of InputRep2Tagalign: '$InputRep2Tagalign'"

mkdir -p /data/
cd /data
sarfile="/data/${DX_JOB_ID}_sar.txt"
sar 5 > $sarfile &
SAR_PID=$!

tagalignRep1=$(dx describe "$TreatmentRep1Tagalign" --name)
dx download "$TreatmentRep1Tagalign" -o $tagalignRep1

inputtagalignRep1=$(dx describe "$InputRep1Tagalign" --name)
dx download "$InputRep1Tagalign" -o $inputtagalignRep1

tagalignRep2=$(dx describe "$TreatmentRep2Tagalign" --name)
dx download "$TreatmentRep2Tagalign" -o $tagalignRep2

inputtagalignRep2=$(dx describe "$InputRep2Tagalign" --name)
dx download "$InputRep2Tagalign" -o $inputtagalignRep2

dx-docker run -v /data/:/data nciccbr/ccbr_pseudoreplicates:v0.0.1 ccbr_create_pooled_and_pseudoreplicates_se.bash --tagAlignRep1 $tagalignRep1 --tagAlignRep2 $tagalignRep2
dx-docker run -v /data/:/data nciccbr/ccbr_pseudoreplicates:v0.0.1 ccbr_create_pooledreplicate_se.bash --tagAlignRep1 $inputtagalignRep1 --tagAlignRep2 $inputtagalignRep2

tagalignRep1pr1=`echo $tagalignRep1|sed "s/.tagAlign/.pr1.tagAlign/g"`
tagalignRep1pr2=`echo $tagalignRep1|sed "s/.tagAlign/.pr2.tagAlign/g"`

tagalignRep2pr1=`echo $tagalignRep2|sed "s/.tagAlign/.pr1.tagAlign/g"`
tagalignRep2pr2=`echo $tagalignRep2|sed "s/.tagAlign/.pr2.tagAlign/g"`

tagAlignRep1Base=`echo $tagalignRep1|sed "s/.tagAlign.gz//g"`
tagAlignRep2Base=`echo $tagalignRep2|sed "s/.tagAlign.gz//g"`

inputtagAlignRep1Base=`echo $inputtagalignRep1|sed "s/.tagAlign.gz//g"`
inputtagAlignRep2Base=`echo $inputtagalignRep2|sed "s/.tagAlign.gz//g"`

pooledRep0=${tagAlignRep1Base}__${tagAlignRep2Base}.pooled.tagAlign.gz
inputpooledRep0=${inputtagAlignRep1Base}__${inputtagAlignRep2Base}.pooled.tagAlign.gz
pooledRep0pr1=${tagAlignRep1Base}__${tagAlignRep2Base}.pooled.pr1.tagAlign.gz
pooledRep0pr2=${tagAlignRep1Base}__${tagAlignRep2Base}.pooled.pr2.tagAlign.gz

TagalignRep1PR1=$(dx upload /data/$tagalignRep1pr1 --brief)
dx-jobutil-add-output TagalignRep1PR1 "$TagalignRep1PR1" --class=file
TagalignRep1PR2=$(dx upload /data/$tagalignRep1pr2 --brief)
dx-jobutil-add-output TagalignRep1PR2 "$TagalignRep1PR2" --class=file

TagalignRep2PR1=$(dx upload /data/$tagalignRep2pr1 --brief)
dx-jobutil-add-output TagalignRep2PR1 "$TagalignRep2PR1" --class=file
TagalignRep2PR2=$(dx upload /data/$tagalignRep2pr2 --brief)
dx-jobutil-add-output TagalignRep2PR2 "$TagalignRep2PR2" --class=file

PooledRep0=$(dx upload /data/$pooledRep0 --brief)
dx-jobutil-add-output PooledRep0 "$PooledRep0" --class=file
InputPooledRep0=$(dx upload /data/$inputpooledRep0 --brief)
dx-jobutil-add-output InputPooledRep0 "$InputPooledRep0" --class=file
PooledRep0PR1=$(dx upload /data/$pooledRep0pr1 --brief)
dx-jobutil-add-output PooledRep0PR1 "$PooledRep0PR1" --class=file
PooledRep0PR2=$(dx upload /data/$pooledRep0pr2 --brief)
dx-jobutil-add-output PooledRep0PR2 "$PooledRep0PR2" --class=file

kill -9 $SAR_PID
SarTxt=$(dx upload $sarfile --brief)
dx-jobutil-add-output SarTxt "$SarTxt" --class=file


}
