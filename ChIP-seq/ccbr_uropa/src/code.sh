#!/bin/bash
# ccbr_macs_se_peakcalling 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of Bed: '$PeakBedFile'"
    echo "Value of Genome: '$Genome'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

mkdir -p /data
cd /data
cpus=`nproc`

sarfile="/data/${DX_JOB_ID}_sar.txt"
sar 5 > $sarfile &
SAR_PID=$!

genome2resources=$(dx describe "$Genome2Resources" --name)
dx download "$Genome2Resources" -o $genome2resources

bed=$(dx describe "$PeakBedFile" --name)
dx download "$PeakBedFile" -o $bed

gtf_fileid=$(python /get_fileid.py $Genome 'genesOnlyGTF' $genome2resources)

gtf=$(dx describe "$gtf_fileid" --name)
dx download "$gtf_fileid" -o $gtf

dx-docker run -v /data/:/data nciccbr/ccbr_uropa:v0.0.2 ccbr_uropa_annotate_tf.bash --bed $bed --gtf $gtf

outbasename=`echo $bed|sed "s/.bed//g"`
allhits=${outbasename}_allhits.txt
finalhits=${outbasename}_finalhits.txt
allhitsbed=${outbasename}_allhits.bed
finalhitsbed=${outbasename}_finalhits.bed
summarypdf=${outbasename}_summary.pdf


    AllHitsTxt=$(dx upload /data/$allhits --brief)
    AllHitsBed=$(dx upload /data/$allhitsbed --brief)
    FinalHitsTxt=$(dx upload /data/$finalhits --brief)
    FinalHitsBed=$(dx upload /data/$finalhitsbed --brief)
    SummaryPdf=$(dx upload /data/$summarypdf --brief)


    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output AllHitsTxt "$AllHitsTxt" --class=file
    dx-jobutil-add-output AllHitsBed "$AllHitsBed" --class=file
    dx-jobutil-add-output FinalHitsTxt "$FinalHitsTxt" --class=file
    dx-jobutil-add-output FinalHitsBed "$FinalHitsBed" --class=file
    dx-jobutil-add-output SummaryPdf "$SummaryPdf" --class=file

    kill -9 $SAR_PID
    SarTxt=$(dx upload $sarfile --brief)
    dx-jobutil-add-output SarTxt "$SarTxt" --class=file
}
