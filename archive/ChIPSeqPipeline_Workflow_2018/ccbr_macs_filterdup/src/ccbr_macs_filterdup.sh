#!/bin/bash
# ccbr_macs_filterdup 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of Bam: '$Bam'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

mkdir -p /data
cd /data

bam=$(dx describe "$Bam" --name)
dx download "$Bam" -o $bam

tagalignfile=`echo $bam|sed "s/.bam/.DD.tagAlign/g"`
outbamfile=`echo $bam|sed "s/.bam/.DD.bam/g"`
outbamflagstat=${outbamfile}.flagstat

dx-docker run -v /data/:/data kopardev/ccbr_macs2_2.1.1.20160309 macs2 filterdup -i $bam -o TmpTagAlign
awk -F"\t" -v OFS="\t" '{if ($2>0 && $3>0) {print}}' TmpTagAlign > TmpTagAlign2

(>&2 echo "DEBUG:Listing all files in data")
(>&2 ls -larth)
(>&2 echo "Done listing")

dx-docker run -v /data/:/data kopardev/ccbr_samtools_1.9 samtools view -H $bam|grep "^@SQ"|cut -f2,3|sed "s/SN://"|sed "s/LN://g" > GenomeFile
awk -F"\t" -v OFS="\t" '{print $1,1,$2}' GenomeFile |sort -k1,1 -k2,2n > GenomeFileBed

(>&2 echo "DEBUG:Listing all files in data")
(>&2 ls -larth)
(>&2 echo "Done listing")

dx-docker run -v /data/:/data kopardev/ccbr_bedtools_2.25.0 bedtools intersect -wa -f 1.0 -a TmpTagAlign2 -b GenomeFileBed > TagAlign
dx-docker run -v /data/:/data kopardev/ccbr_bedtools_2.25.0 bedtools bedtobam -i TagAlign -g GenomeFile > OutBam
dx-docker run -v /data/:/data kopardev/ccbr_samtools_1.9 samtools flagstat OutBam > OutBamFlagstat

(>&2 echo "DEBUG:Listing all files in data")
(>&2 ls -larth)
(>&2 echo "Done listing")

mv TagAlign $tagalignfile
mv OutBam $outbamfile
mv OutBamFlagstat $outbamflagstat

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    TagAlign=$(dx upload /data/$tagalignfile --brief)
    OutBam=$(dx upload /data/$outbamfile --brief)
    OutBamFlagstat=$(dx upload /data/$outbamflagstat --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output TagAlign "$TagAlign" --class=file
    dx-jobutil-add-output OutBam "$OutBam" --class=file
    dx-jobutil-add-output OutBamFlagstat "$OutBamFlagstat" --class=file
}
